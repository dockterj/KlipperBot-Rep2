[gcode_macro M300]
gcode:
    {% set S = params.S|default(1000)|int %} ; S sets the tone frequency
    {% set P = params.P|default(100)|int %} ; P sets the tone duration
    {% set L = 0.5 %} ; L varies the PWM on time, close to 0 or 1 the tone gets a bit quieter. 0.5 is a symmetric waveform
    {% if S <= 0 %} ; dont divide through zero
    {% set F = 1 %}
    {% set L = 0 %}
    {% elif S >= 10000 %} ;max frequency set to 10kHz
    {% set F = 0 %}
    {% else %}
    {% set F = 1/S %} ;convert frequency to seconds
    {% endif %}
    SET_PIN PIN=_BEEPER_pin VALUE={L} CYCLE_TIME={F} ;Play tone
    G4 P{P} ;tone duration
    SET_PIN PIN=_BEEPER_pin VALUE=0

[gcode_macro M72]
gcode:

    {% if params.P|int == 9 %}
    M300 S294 P220 ;N1 D4 1/8
    M300 S311 P220 ;N2 D#4 1/8
    M300 S330 P220 ;N3 E4 1/8
    M300 S523 P460 ;N4 C5 1/4
    M300 S330 P220 ;N5 E4 1/8
    M300 S523 P230 ;N6 C5 1/8
    M300 S330 P220 ;N7 E4 1/8
    M300 S523 P230 ;N8 C5 1/8
    M300 S523 P950 ;N9 C5 1/2
    M300 S523 P220 ;N10 C5 1/8
    M300 S523 P220 ;N11 C5 1/8
    M300 S587 P220 ;N12 D5 1/8
    M300 S622 P220 ;N13 D#5 1/8
    M300 S659 P220 ;N14 E5 1/8
    M300 S523 P220 ;N15 C5 1/8
    M300 S587 P220 ;N16 D5 1/8
    M300 S659 P230 ;N17 E5 1/8
    M300 S659 P230 ;N11 E5 1/8
    M300 S494 P220 ;N19 B4 1/8
    M300 S587 P460 ;N20 D5 1/2
    M300 S523 P1420; C5 1/2+1/4
    M300 S0 P1920; pause one measure
    {% endif %}

    {% if params.P|int == 0 %} ; print error
    M300 S659 P105 ;E5
    M300 S0 P105 ;
    M300 S494 P105 ;B4
    M300 S0 P105 ;
    M300 S294 P440 ;D4
    {% endif %}

    {% if params.P|int == 1 %} ; print done ta-da
    M300 S1568 P85
    M300 S0 P85
    M300 S2093 P85
    M300 S0 P85
    M300 S2637 P85
    M300 S0 P85
    M300 S3136 P171
    M300 S0 P171
    M300 S2349 P85
    M300 S0 P85
    M300 S2093 P85
    M300 S0 P85
    M300 S2637 P171
    M300 S0 P85
    M300 S0 P256
    M300 S3520 P85
    M300 S0 P85
    M300 S2093 P342
    {% endif %}

    {% if params.P|int == 3 %} ; startup
    M300 S3520 P288 ;A7
    #M300 S0 P188 ;
    M300 S4435 P188 ;CS8
    #M300 S0 P188 ;
    M300 S4699 P433 ;D8
    #M300 S0 P0 ;
    {% endif %}

    {% if params.P|int == 4 %} ; makerbot tv
    M300 S3520 P200 ;A7
    M300 S0 P20 ;
    M300 S3520 P200 ;A7
    M300 S0 P20 ;
    M300 S3729 P400 ;AS7
    M300 S0 P20 ;
    M300 S4186 P400 ;C8
    M300 S0 P20 ;
    M300 S3520 P800 ;A7
    #M300 S0 P0 ;
    {% endif %}

    {% if params.P|int == 5 %} ; Beethoven 5th
    M300 S1480 P200 ;FS6
    M300 S0 P20 ;
    M300 S1480 P200 ;FS6
    M300 S0 P20 ;
    M300 S1480 P200 ;FS6
    M300 S0 P20 ;
    M300 S1245 P1200 ;DS6
    M300 S0 P20 ;
    M300 S1397 P200 ;F6
    M300 S0 P20 ;
    M300 S1397 P200 ;F6
    M300 S0 P20 ;
    M300 S1397 P200 ;F6
    M300 S0 P20 ;
    M300 S1175 P1200 ;D6
    #M300 S0 P20 ;
    #M300 S0 P0 ;
    {% endif %}

######################################################################
# klipper_lcd_menu enhancements
######################################################################
# These macros and menus will add functionality specific
# to the Rep2/Rep2x (or other printers with 20x4 lcds and bed screws)
# to klipper_lcd_menu from dasburninator

#todo create pr for these, and pull control items out of calibration file
#     update menu tree in documentation to reflect what is really there
#     prep_abs and prep_pla
#     pause at next layer

[gcode_macro LIGHTS_BRIGHT]
gcode:
    SET_GCODE_VARIABLE MACRO=_LED_COLOR_PARAMS VARIABLE=idle_color_rgb VALUE=1.0,1.0,1.0
    
[gcode_macro LIGHTS_ON]
gcode:
    SET_GCODE_VARIABLE MACRO=_LED_COLOR_PARAMS VARIABLE=idle_color_rgb VALUE=.5,.5,.5
    
[gcode_macro LIGHTS_OFF]
gcode:
    SET_GCODE_VARIABLE MACRO=_LED_COLOR_PARAMS VARIABLE=idle_color_rgb VALUE=0,0,0

[menu __main __calib __bedscrews]
type: list
name: Bed Screws Adjust
enable: {'bed_screws' in printer}
index: 3

[menu __main __calib __bedscrews __start]
type: command
name: Start
gcode: BED_SCREWS_ADJUST

[menu __main __calib __bedscrews __accept]
type: command
name: Accept
gcode: accept

[menu __main __calib __bedscrews __adjust]
type: command
name: Adjusted
gcode: adjusted

[menu __main __calib __bedscrews __abort_screws]
type: command
name: Abort

######################################################################
# LED update code
######################################################################
# This approximates the behavior of the stock Replicator 2 preheat LED control
# The LED will be white (or any user defined color) on startup, or anytime the
# printer is at temperature. When the target temperature is changed, it will
# check what percentage of the target temperature the hotend is currently at,
# (relative to room temperature, 20C) and update the LED color to indicate what
# is happening. It starts out blue when it is cold, and stays blue until it
# crosses the specified transition percentage. Then it changes gradually from
# blue to red as it approaches the target temperature. Then goes back to the
# custom color once hot.

# Set LED control user parameters here
[gcode_macro _LED_COLOR_PARAMS]
# R,G,B User color to show when idle, or at temperature. Typically white, but can be customized
variable_idle_color_rgb:       1.0, 1.0, 1.0
# Ratio (between 0.0 and 1.0) at which to start transitioning from blue to red
variable_red_transition_start: 0.70
# Ratio (between 0.0 and 1.0) above which to consider it "at temperature"
variable_at_temp_threshold:    0.97
gcode:

# This will start monitoring a short delay after startup
[delayed_gcode led_update_init]
initial_duration: 5
gcode:
  SET_LED_TEMPLATE LED=led TEMPLATE=led_temperature_template

# This will be called asynchronously to update LED color frequently
[display_template led_temperature_template]
text:
  {% set vars = printer["gcode_macro _LED_COLOR_PARAMS"] %}
  {% set has_bed = True if ('heater_bed' in printer.configfile.config) else False %}
  {% set has_e1 = True if ('extruder1' in printer.configfile.config) else False %}
  # Calculate current percentage of target relative to room temperature (20 degrees).
  # A target of 20 or less is always considered 100% (also avoids divide by zero)
  {% set e0_ratio  = 1.0 if printer.extruder.target<=20
                     else (printer.extruder.temperature-20)/(printer.extruder.target-20) %}
  {% set e1_ratio  = 1.0 if (not has_e1 or printer.extruder1.target<=20)
                     else (printer.extruder1.temperature-20)/(printer.extruder1.target-20) %}
  {% set bed_ratio = 1.0 if (not has_bed or printer.heater_bed.target<=20)
                     else (printer.heater_bed.temperature-20)/(printer.heater_bed.target-20) %}
  # Limit range between 0 and 1
  {% set e0_ratio   = ( [0, e0_ratio,  1.0]|sort )[1] %}
  {% set e1_ratio   = ( [0, e1_ratio,  1.0]|sort )[1] %}
  {% set bed_ratio  = ( [0, bed_ratio, 1.0]|sort )[1] %}
  # Get minimum value and use that for the LED
  {% set heat_ratio = [ e0_ratio, e1_ratio, bed_ratio ]|min %}
  {% set heat_at_target = True if heat_ratio >= vars.at_temp_threshold %}
  # Debug logging (uncomment to enable)
  # {action_respond_info("LED [e0, e1, bed] = [%s, %s, %s] -> %s" % (e0_ratio, e1_ratio, bed_ratio, heat_ratio) )}
  # Calculate red and blue percentages. Anything below red transition will be solid blue.
  {% set red_percent = [ (heat_ratio-vars.red_transition_start)/(1-vars.red_transition_start), 0 ]|max %}
  {% set blue_percent = 1-red_percent %}
  {% if heat_at_target %}
    {vars.idle_color_rgb[0]}, {vars.idle_color_rgb[1]}, {vars.idle_color_rgb[2]}, 0
  {% else %}
    {red_percent}, 0.0, {blue_percent}, 0.0
  {% endif %}

[delayed_gcode startup]
initial_duration: 1
gcode:
    # Reset the G-Code Z offset (adjust Z offset if needed)
    SET_GCODE_OFFSET Z=0.095
    # Set origin accurately.  This may be different based on
    # different build plates.
    SET_GCODE_OFFSET X=32
    M72 P3
    
[gcode_macro START_PRINT]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
    # Start bed heating
    M140 S{BED_TEMP}
    # Set units to millimeters and use absolute coordinates
    G21
    G90
    # set absolute distances for extrusion and reset extruder distance
    M82
    G92 E0
    # Home the printer
    G28
    # Move the nozzle near the bed
    G1 Z5 F3000
    # Lower Stepper Vrefs while heating
    G130 X20 Y20 Z20 A20 B20
    # Wait for bed to reach temperature
    M190 S{BED_TEMP}
    # Set and wait for nozzle to reach temperature
    M109 S{EXTRUDER_TEMP}
    # Set Default Stepper Vrefs
    G130 X127 Y127 Z40 A127 B127
    # Move the nozzle very close to the bed
    G1 Z0.15 F300

[gcode_macro END_PRINT]
gcode:
    # Turn off bed, extruder, and fan
    M140 S0
    M104 S0
    M106 S0
    # Move nozzle away from print while retracting
    G91
    G1 X-2 Y-2 E-3 F300
    # Raise nozzle by 10mm
    G1 Z10 F3000
    G90
    # Disable steppers
    M84
    # Play Ta-Da!
    M72 P1

######################################################################
# G130: Set digital potentiometer value
######################################################################

# The macro below uses the MCP4018 SET_DIGIPOT command to implement
# a `G130` as used on classic Mightyboard-based printers such as
# The Makerbot Replicator 2/2X.
#
# The `G130` command can be used to lower the stepper current
# during preheating and raise the current again prior to starting
# the print.  This is necessary for printers with smaller power
# supplies that needed all the power to heat the bed.
#
# This macro requires one or more [mcp4018] configuration sections:
# (x_axis_pot, y_axis_pot, z_axis_pot, a_axis_pot, b_axis_pot)
#
# Example: G130 X20 Y20 Z20 A20 B20 ; Lower stepper Vrefs while heating

[gcode_macro G130]
gcode:
  M400
  {% if ('X' in params) and ('mcp4018 x_axis_pot' in printer.configfile.config) %}
    {% set x_value = params['X']|float %}
    {% set x_axis_pot_scale = printer.configfile.config["mcp4018 x_axis_pot"].scale|float %}
    SET_DIGIPOT DIGIPOT=x_axis_pot WIPER={ x_axis_pot_scale * (x_value / 127.0)}
  {% endif %}
  {% if ('Y' in params) and ('mcp4018 y_axis_pot' in printer.configfile.config) %}
    {% set y_value = params['Y']|float %}
    {% set y_axis_pot_scale = printer.configfile.config["mcp4018 y_axis_pot"].scale|float %}
    SET_DIGIPOT DIGIPOT=y_axis_pot WIPER={ y_axis_pot_scale * (y_value / 127.0)}
  {% endif %}
  {% if ('Z' in params) and ('mcp4018 z_axis_pot' in printer.configfile.config) %}
    {% set z_value = params['Z']|float %}
    {% set z_axis_pot_scale = printer.configfile.config["mcp4018 z_axis_pot"].scale|float %}
    SET_DIGIPOT DIGIPOT=z_axis_pot WIPER={ z_axis_pot_scale * (z_value / 127.0)}
  {% endif %}
  {% if ('A' in params) and ('mcp4018 a_axis_pot' in printer.configfile.config) %}
    {% set a_value = params['A']|float %}
    {% set a_axis_pot_scale = printer.configfile.config["mcp4018 a_axis_pot"].scale|float %}
    SET_DIGIPOT DIGIPOT=a_axis_pot WIPER={ a_axis_pot_scale * (a_value / 127.0)}
  {% endif %}
  {% if ('B' in params) and ('mcp4018 b_axis_pot' in printer.configfile.config) %}
    {% set b_value = params['B']|float %}
    {% set b_axis_pot_scale = printer.configfile.config["mcp4018 b_axis_pot"].scale|float %}
    SET_DIGIPOT DIGIPOT=b_axis_pot WIPER={ b_axis_pot_scale * (b_value / 127.0)}
  {% endif %}
